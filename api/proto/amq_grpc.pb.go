// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/proto/amq.proto

package amqpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AMQ_RegisterClient_FullMethodName   = "/amq.v1.AMQ/RegisterClient"
	AMQ_UnregisterClient_FullMethodName = "/amq.v1.AMQ/UnregisterClient"
	AMQ_Heartbeat_FullMethodName        = "/amq.v1.AMQ/Heartbeat"
	AMQ_CreateQueue_FullMethodName      = "/amq.v1.AMQ/CreateQueue"
	AMQ_DeleteQueue_FullMethodName      = "/amq.v1.AMQ/DeleteQueue"
	AMQ_ListQueues_FullMethodName       = "/amq.v1.AMQ/ListQueues"
	AMQ_GetQueueStats_FullMethodName    = "/amq.v1.AMQ/GetQueueStats"
	AMQ_Subscribe_FullMethodName        = "/amq.v1.AMQ/Subscribe"
	AMQ_Unsubscribe_FullMethodName      = "/amq.v1.AMQ/Unsubscribe"
	AMQ_SubmitTask_FullMethodName       = "/amq.v1.AMQ/SubmitTask"
	AMQ_SendDirect_FullMethodName       = "/amq.v1.AMQ/SendDirect"
	AMQ_ReceiveMessages_FullMethodName  = "/amq.v1.AMQ/ReceiveMessages"
	AMQ_AckMessage_FullMethodName       = "/amq.v1.AMQ/AckMessage"
	AMQ_NackMessage_FullMethodName      = "/amq.v1.AMQ/NackMessage"
	AMQ_SubmitTaskBatch_FullMethodName  = "/amq.v1.AMQ/SubmitTaskBatch"
	AMQ_AckMessageBatch_FullMethodName  = "/amq.v1.AMQ/AckMessageBatch"
	AMQ_GetClientInfo_FullMethodName    = "/amq.v1.AMQ/GetClientInfo"
	AMQ_ListClients_FullMethodName      = "/amq.v1.AMQ/ListClients"
	AMQ_GetMetrics_FullMethodName       = "/amq.v1.AMQ/GetMetrics"
)

// AMQClient is the client API for AMQ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AMQ service provides high-performance message queue operations for agents
type AMQClient interface {
	// Client management
	RegisterClient(ctx context.Context, in *RegisterClientRequest, opts ...grpc.CallOption) (*RegisterClientResponse, error)
	UnregisterClient(ctx context.Context, in *UnregisterClientRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Queue management
	CreateQueue(ctx context.Context, in *CreateQueueRequest, opts ...grpc.CallOption) (*CreateQueueResponse, error)
	DeleteQueue(ctx context.Context, in *DeleteQueueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListQueues(ctx context.Context, in *ListQueuesRequest, opts ...grpc.CallOption) (*ListQueuesResponse, error)
	GetQueueStats(ctx context.Context, in *GetQueueStatsRequest, opts ...grpc.CallOption) (*GetQueueStatsResponse, error)
	// Subscription management
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Message operations
	SubmitTask(ctx context.Context, in *SubmitTaskRequest, opts ...grpc.CallOption) (*SubmitTaskResponse, error)
	SendDirect(ctx context.Context, in *SendDirectRequest, opts ...grpc.CallOption) (*SendDirectResponse, error)
	ReceiveMessages(ctx context.Context, in *ReceiveMessagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Message], error)
	AckMessage(ctx context.Context, in *AckMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NackMessage(ctx context.Context, in *NackMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Batch operations for performance
	SubmitTaskBatch(ctx context.Context, in *SubmitTaskBatchRequest, opts ...grpc.CallOption) (*SubmitTaskBatchResponse, error)
	AckMessageBatch(ctx context.Context, in *AckMessageBatchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Monitoring
	GetClientInfo(ctx context.Context, in *GetClientInfoRequest, opts ...grpc.CallOption) (*ClientInfo, error)
	ListClients(ctx context.Context, in *ListClientsRequest, opts ...grpc.CallOption) (*ListClientsResponse, error)
	GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error)
}

type aMQClient struct {
	cc grpc.ClientConnInterface
}

func NewAMQClient(cc grpc.ClientConnInterface) AMQClient {
	return &aMQClient{cc}
}

func (c *aMQClient) RegisterClient(ctx context.Context, in *RegisterClientRequest, opts ...grpc.CallOption) (*RegisterClientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterClientResponse)
	err := c.cc.Invoke(ctx, AMQ_RegisterClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMQClient) UnregisterClient(ctx context.Context, in *UnregisterClientRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AMQ_UnregisterClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMQClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AMQ_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMQClient) CreateQueue(ctx context.Context, in *CreateQueueRequest, opts ...grpc.CallOption) (*CreateQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateQueueResponse)
	err := c.cc.Invoke(ctx, AMQ_CreateQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMQClient) DeleteQueue(ctx context.Context, in *DeleteQueueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AMQ_DeleteQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMQClient) ListQueues(ctx context.Context, in *ListQueuesRequest, opts ...grpc.CallOption) (*ListQueuesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQueuesResponse)
	err := c.cc.Invoke(ctx, AMQ_ListQueues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMQClient) GetQueueStats(ctx context.Context, in *GetQueueStatsRequest, opts ...grpc.CallOption) (*GetQueueStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQueueStatsResponse)
	err := c.cc.Invoke(ctx, AMQ_GetQueueStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMQClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AMQ_Subscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMQClient) Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AMQ_Unsubscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMQClient) SubmitTask(ctx context.Context, in *SubmitTaskRequest, opts ...grpc.CallOption) (*SubmitTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitTaskResponse)
	err := c.cc.Invoke(ctx, AMQ_SubmitTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMQClient) SendDirect(ctx context.Context, in *SendDirectRequest, opts ...grpc.CallOption) (*SendDirectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendDirectResponse)
	err := c.cc.Invoke(ctx, AMQ_SendDirect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMQClient) ReceiveMessages(ctx context.Context, in *ReceiveMessagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Message], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AMQ_ServiceDesc.Streams[0], AMQ_ReceiveMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReceiveMessagesRequest, Message]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AMQ_ReceiveMessagesClient = grpc.ServerStreamingClient[Message]

func (c *aMQClient) AckMessage(ctx context.Context, in *AckMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AMQ_AckMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMQClient) NackMessage(ctx context.Context, in *NackMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AMQ_NackMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMQClient) SubmitTaskBatch(ctx context.Context, in *SubmitTaskBatchRequest, opts ...grpc.CallOption) (*SubmitTaskBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitTaskBatchResponse)
	err := c.cc.Invoke(ctx, AMQ_SubmitTaskBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMQClient) AckMessageBatch(ctx context.Context, in *AckMessageBatchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AMQ_AckMessageBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMQClient) GetClientInfo(ctx context.Context, in *GetClientInfoRequest, opts ...grpc.CallOption) (*ClientInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientInfo)
	err := c.cc.Invoke(ctx, AMQ_GetClientInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMQClient) ListClients(ctx context.Context, in *ListClientsRequest, opts ...grpc.CallOption) (*ListClientsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClientsResponse)
	err := c.cc.Invoke(ctx, AMQ_ListClients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMQClient) GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricsResponse)
	err := c.cc.Invoke(ctx, AMQ_GetMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AMQServer is the server API for AMQ service.
// All implementations must embed UnimplementedAMQServer
// for forward compatibility.
//
// AMQ service provides high-performance message queue operations for agents
type AMQServer interface {
	// Client management
	RegisterClient(context.Context, *RegisterClientRequest) (*RegisterClientResponse, error)
	UnregisterClient(context.Context, *UnregisterClientRequest) (*emptypb.Empty, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*emptypb.Empty, error)
	// Queue management
	CreateQueue(context.Context, *CreateQueueRequest) (*CreateQueueResponse, error)
	DeleteQueue(context.Context, *DeleteQueueRequest) (*emptypb.Empty, error)
	ListQueues(context.Context, *ListQueuesRequest) (*ListQueuesResponse, error)
	GetQueueStats(context.Context, *GetQueueStatsRequest) (*GetQueueStatsResponse, error)
	// Subscription management
	Subscribe(context.Context, *SubscribeRequest) (*emptypb.Empty, error)
	Unsubscribe(context.Context, *UnsubscribeRequest) (*emptypb.Empty, error)
	// Message operations
	SubmitTask(context.Context, *SubmitTaskRequest) (*SubmitTaskResponse, error)
	SendDirect(context.Context, *SendDirectRequest) (*SendDirectResponse, error)
	ReceiveMessages(*ReceiveMessagesRequest, grpc.ServerStreamingServer[Message]) error
	AckMessage(context.Context, *AckMessageRequest) (*emptypb.Empty, error)
	NackMessage(context.Context, *NackMessageRequest) (*emptypb.Empty, error)
	// Batch operations for performance
	SubmitTaskBatch(context.Context, *SubmitTaskBatchRequest) (*SubmitTaskBatchResponse, error)
	AckMessageBatch(context.Context, *AckMessageBatchRequest) (*emptypb.Empty, error)
	// Monitoring
	GetClientInfo(context.Context, *GetClientInfoRequest) (*ClientInfo, error)
	ListClients(context.Context, *ListClientsRequest) (*ListClientsResponse, error)
	GetMetrics(context.Context, *GetMetricsRequest) (*MetricsResponse, error)
	mustEmbedUnimplementedAMQServer()
}

// UnimplementedAMQServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAMQServer struct{}

func (UnimplementedAMQServer) RegisterClient(context.Context, *RegisterClientRequest) (*RegisterClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterClient not implemented")
}
func (UnimplementedAMQServer) UnregisterClient(context.Context, *UnregisterClientRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterClient not implemented")
}
func (UnimplementedAMQServer) Heartbeat(context.Context, *HeartbeatRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedAMQServer) CreateQueue(context.Context, *CreateQueueRequest) (*CreateQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueue not implemented")
}
func (UnimplementedAMQServer) DeleteQueue(context.Context, *DeleteQueueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQueue not implemented")
}
func (UnimplementedAMQServer) ListQueues(context.Context, *ListQueuesRequest) (*ListQueuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQueues not implemented")
}
func (UnimplementedAMQServer) GetQueueStats(context.Context, *GetQueueStatsRequest) (*GetQueueStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueueStats not implemented")
}
func (UnimplementedAMQServer) Subscribe(context.Context, *SubscribeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedAMQServer) Unsubscribe(context.Context, *UnsubscribeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedAMQServer) SubmitTask(context.Context, *SubmitTaskRequest) (*SubmitTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTask not implemented")
}
func (UnimplementedAMQServer) SendDirect(context.Context, *SendDirectRequest) (*SendDirectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDirect not implemented")
}
func (UnimplementedAMQServer) ReceiveMessages(*ReceiveMessagesRequest, grpc.ServerStreamingServer[Message]) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveMessages not implemented")
}
func (UnimplementedAMQServer) AckMessage(context.Context, *AckMessageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckMessage not implemented")
}
func (UnimplementedAMQServer) NackMessage(context.Context, *NackMessageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NackMessage not implemented")
}
func (UnimplementedAMQServer) SubmitTaskBatch(context.Context, *SubmitTaskBatchRequest) (*SubmitTaskBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTaskBatch not implemented")
}
func (UnimplementedAMQServer) AckMessageBatch(context.Context, *AckMessageBatchRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckMessageBatch not implemented")
}
func (UnimplementedAMQServer) GetClientInfo(context.Context, *GetClientInfoRequest) (*ClientInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientInfo not implemented")
}
func (UnimplementedAMQServer) ListClients(context.Context, *ListClientsRequest) (*ListClientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClients not implemented")
}
func (UnimplementedAMQServer) GetMetrics(context.Context, *GetMetricsRequest) (*MetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedAMQServer) mustEmbedUnimplementedAMQServer() {}
func (UnimplementedAMQServer) testEmbeddedByValue()             {}

// UnsafeAMQServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AMQServer will
// result in compilation errors.
type UnsafeAMQServer interface {
	mustEmbedUnimplementedAMQServer()
}

func RegisterAMQServer(s grpc.ServiceRegistrar, srv AMQServer) {
	// If the following call pancis, it indicates UnimplementedAMQServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AMQ_ServiceDesc, srv)
}

func _AMQ_RegisterClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMQServer).RegisterClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AMQ_RegisterClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMQServer).RegisterClient(ctx, req.(*RegisterClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AMQ_UnregisterClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMQServer).UnregisterClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AMQ_UnregisterClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMQServer).UnregisterClient(ctx, req.(*UnregisterClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AMQ_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMQServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AMQ_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMQServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AMQ_CreateQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMQServer).CreateQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AMQ_CreateQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMQServer).CreateQueue(ctx, req.(*CreateQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AMQ_DeleteQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMQServer).DeleteQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AMQ_DeleteQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMQServer).DeleteQueue(ctx, req.(*DeleteQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AMQ_ListQueues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQueuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMQServer).ListQueues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AMQ_ListQueues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMQServer).ListQueues(ctx, req.(*ListQueuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AMQ_GetQueueStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueueStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMQServer).GetQueueStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AMQ_GetQueueStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMQServer).GetQueueStats(ctx, req.(*GetQueueStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AMQ_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMQServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AMQ_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMQServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AMQ_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMQServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AMQ_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMQServer).Unsubscribe(ctx, req.(*UnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AMQ_SubmitTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMQServer).SubmitTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AMQ_SubmitTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMQServer).SubmitTask(ctx, req.(*SubmitTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AMQ_SendDirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDirectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMQServer).SendDirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AMQ_SendDirect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMQServer).SendDirect(ctx, req.(*SendDirectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AMQ_ReceiveMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReceiveMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AMQServer).ReceiveMessages(m, &grpc.GenericServerStream[ReceiveMessagesRequest, Message]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AMQ_ReceiveMessagesServer = grpc.ServerStreamingServer[Message]

func _AMQ_AckMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMQServer).AckMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AMQ_AckMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMQServer).AckMessage(ctx, req.(*AckMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AMQ_NackMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NackMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMQServer).NackMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AMQ_NackMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMQServer).NackMessage(ctx, req.(*NackMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AMQ_SubmitTaskBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTaskBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMQServer).SubmitTaskBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AMQ_SubmitTaskBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMQServer).SubmitTaskBatch(ctx, req.(*SubmitTaskBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AMQ_AckMessageBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckMessageBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMQServer).AckMessageBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AMQ_AckMessageBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMQServer).AckMessageBatch(ctx, req.(*AckMessageBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AMQ_GetClientInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMQServer).GetClientInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AMQ_GetClientInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMQServer).GetClientInfo(ctx, req.(*GetClientInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AMQ_ListClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMQServer).ListClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AMQ_ListClients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMQServer).ListClients(ctx, req.(*ListClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AMQ_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMQServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AMQ_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMQServer).GetMetrics(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AMQ_ServiceDesc is the grpc.ServiceDesc for AMQ service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AMQ_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "amq.v1.AMQ",
	HandlerType: (*AMQServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterClient",
			Handler:    _AMQ_RegisterClient_Handler,
		},
		{
			MethodName: "UnregisterClient",
			Handler:    _AMQ_UnregisterClient_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _AMQ_Heartbeat_Handler,
		},
		{
			MethodName: "CreateQueue",
			Handler:    _AMQ_CreateQueue_Handler,
		},
		{
			MethodName: "DeleteQueue",
			Handler:    _AMQ_DeleteQueue_Handler,
		},
		{
			MethodName: "ListQueues",
			Handler:    _AMQ_ListQueues_Handler,
		},
		{
			MethodName: "GetQueueStats",
			Handler:    _AMQ_GetQueueStats_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _AMQ_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _AMQ_Unsubscribe_Handler,
		},
		{
			MethodName: "SubmitTask",
			Handler:    _AMQ_SubmitTask_Handler,
		},
		{
			MethodName: "SendDirect",
			Handler:    _AMQ_SendDirect_Handler,
		},
		{
			MethodName: "AckMessage",
			Handler:    _AMQ_AckMessage_Handler,
		},
		{
			MethodName: "NackMessage",
			Handler:    _AMQ_NackMessage_Handler,
		},
		{
			MethodName: "SubmitTaskBatch",
			Handler:    _AMQ_SubmitTaskBatch_Handler,
		},
		{
			MethodName: "AckMessageBatch",
			Handler:    _AMQ_AckMessageBatch_Handler,
		},
		{
			MethodName: "GetClientInfo",
			Handler:    _AMQ_GetClientInfo_Handler,
		},
		{
			MethodName: "ListClients",
			Handler:    _AMQ_ListClients_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _AMQ_GetMetrics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveMessages",
			Handler:       _AMQ_ReceiveMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/amq.proto",
}
